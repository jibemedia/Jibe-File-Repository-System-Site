<?php
/* This file is part of "filebrowser".
 *    Copyright 2009, arNumÃ©ral
 *    Author : Yoran Brault
 *    eMail  : yoran.brault@bad_arnumeral.fr (remove bad_ before sending an email)
 *    Site   : http://www.arnumeral.fr
 *
 * "filebrowser" is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * "filebrowser" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with "filebrowser"; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

require_once "filebrowser.common.inc";
require_once "filebrowser.helpers.inc";

/**
 * Implementation of hook_node_info().
 */
function filebrowser_node_info() {
  return array(
    'dir_listing' => array(
      'name' => t('Directory listing'),
      'module' => 'filebrowser',
      'description' => t("A listing of files similar to how Apache lists files in a directory."),
      'has_body' => TRUE
    )
  );
}

/**
 * hook_perm implementation.
 */
function filebrowser_perm() {
  return array(
    FILEBROWSER_CREATE_DIRECTORY_LISTING,
    FILEBROWSER_DELETE_OWN_DIRECTORY_LISTINGS,
    FILEBROWSER_DELETE_ANY_DIRECTORY_LISTINGS,
    FILEBROWSER_EDIT_OWN_DIRECTORY_LISTINGS,
    FILEBROWSER_EDIT_ANY_DIRECORY_LISTINGS,
    FILEBROWSER_VIEW_DIRECORY_LISTINGS,
    FILEBROWSER_UPLOAD,
    FILEBROWSER_DOWNLOAD_ARCHIVE,
    FILEBROWSER_DELETE_FILE,
    FILEBROWSER_DOWNLOAD,
    FILEBROWSER_CREATE_FOLDER
  );
}

/**
 * Implementation of hook_form().
 */
function filebrowser_form(& $node, $form_state) {
  $node->folder_rights=(object)$node->folder_rights;
  $node->folder_description=(object)$node->folder_description;																														//I changed this.
  $node->folder_presentation=(object)$node->folder_presentation;
  $node->folder_uploads=(object)$node->folder_uploads;
  $type = node_get_types('type', $node);

  /** Folder description
   * *************************************************************** */																													//I Changed this.
  $form['folder_description'] = array(
    '#type' => 'fieldset',
    '#title' => t('Folder Description'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -10
  );

  $form['folder_description']['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => !empty($node->title) ? $node->title : '',
    '#required' => TRUE
  );

  $form['folder_description']['folder_path'] = array(
    '#type' => 'textfield',
    '#title' => t('The system file path to the directory'),
    '#description' => t('This can be an absolute path or should be relative to the Drupal root directory.'),
    '#default_value' => isset($node->folder_path) ? $node->folder_path : '',
    '#required' => TRUE
  );

  if (module_exists('token')) {
    $form['folder_description']['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE
    );

    $form['folder_description']['token_help']['help'] = array(
      '#value' => theme('token_help', 'node')
    );
  }

  $form['folder_description']['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t("This will overide metainformations from .bbs or .ion files."),
    '#default_value' => $node->body,
    '#rows' => 5
  );
  $form['folder_description']['body_filter']['format'] = filter_form($node->format);

  /** Folder rights
   * *************************************************************** */
  $form['folder_rights'] = array(
    '#type' => 'fieldset',
    '#title' => t('Folder rights'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -9
  );

  $form['folder_rights']['explore_subdirs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow subdirectory listings.'),
    '#default_value' => $node->folder_rights->explore_subdirs
  );

  $form['folder_rights']['download_archive'] = array(
    '#type' => 'checkbox',
    '#title' => t("Allow folder's files to be downloaded as an archive"),
    '#description' => t("Check this if you allow users to download all folder files as an archive."),
    '#default_value' => $node->folder_rights->download_archive
  );

  $form['folder_rights']['create_folders'] = array(
    '#type' => 'checkbox',
    '#title' => t("Allow folder to be created"),
    '#description' => t("Check this if you allow users to create new folders."),
    '#default_value' => $node->folder_rights->create_folders
  );

  $managers = _filebrowser_options(_filebrowser_externals('download_manager_info'));
  $form['folder_rights']['download_manager'] = array(
    '#type' => 'select',
    '#title' => t("Download manager"),
    '#description' => t("A download manager will handle the way of download folder files."),
    '#default_value' => $node->folder_rights->download_manager,
    '#options' => $managers,
    '#weight' => -7
  );

  $form['folder_rights']['forbidden_files'] = array(
    '#type' => 'textarea',
    '#title' => t('Blacklist'),
    '#description' => t('List of patterns of forbidden files, you can use wildcards (ex. .*).'),
    '#default_value' => $node->folder_rights->forbidden_files
  );
  $form['folder_rights']['filtered_files'] = array(
    '#type' => 'textarea',
    '#title' => t('Whitelist'),
    '#description' => t('List of patterns to filter, one per line, you can use wildcards (ex. *.pdf).'),
    '#default_value' => $node->folder_rights->filtered_files
  );

  /** Folder uploads
   * *************************************************************** */
  $form['folder_uploads'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Folder Upload'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -8
  );
  $form['folder_uploads']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow uploads'),
    '#description' => t('Allow users to upload files.'),
    '#default_value' => $node->folder_uploads->enabled
  );
  $form['folder_uploads']['allow_overwrite'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow overwrites'),
    '#description' => t('Allow files to be overwrotes.'),
    '#default_value' => $node->folder_uploads->allow_overwrite
  );
  $form['folder_uploads']['accepted_uploaded_files'] = array(
    '#type' => 'textarea',
    '#title' => t('Accepted files for uploading'),
    '#description' => t('List of file patterns accepted for upload. Empty means anything.'),
    '#default_value' => $node->folder_uploads->accepted_uploaded_files
  );

  /** Folder presentation
   * *************************************************************** */
  $form['folder_presentation'] = array(
    '#type' => 'fieldset',
    '#title' => t('Folder presentation'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -7
  );
  $presentations = _filebrowser_options(_filebrowser_externals('presentations'));
  $form['folder_presentation']['default_view'] = array(
    '#type' => 'select',
    '#title' => t("Default view"),
    '#default_value' => $node->folder_presentation->default_view,
    '#options' => $presentations
  );
  $form['folder_presentation']['encoding'] = array(
    '#type' => 'textfield',
    '#title' => t('FileSystem encoding'),
    '#description' => t('Set here your file system encoding (UTF-8, ISO-8859-15, etc.).'),
    '#default_value' => $node->folder_presentation->encoding,
    '#required' => TRUE
  );
  $form['folder_presentation']['hide_extension'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide file extensions'),
    '#default_value' => $node->folder_presentation->hide_extension
  );

  $columns = _filebrowser_externals('metadata_info');
  $form['folder_presentation']['visible_columns'] = array(
    '#type' => 'checkboxes',
    '#title' => t("Visible columns"),
    '#default_value' => _filebrowser_properties_to_checkboxes($node->folder_presentation->visible_columns),
    '#options' => _filebrowser_options($columns)
  );

  $sortable = array();
  foreach ($columns as $name => $data) {
    if (isset($data['sortable']) && $data['sortable']) {
      $sortable[$name] = $data['title'];
    }
  }
  $form['folder_presentation']['default_sort'] = array(
    '#type' => 'select',
    '#title' => t("Default sort"),
    '#default_value' => $node->folder_presentation->default_sort,
    '#options' => $sortable
  );

  $form['folder_presentation']['default_sort_order'] = array(
    '#type' => 'select',
    '#title' => t("Default sort order"),
    '#default_value' => $node->folder_presentation->default_sort_order,
    '#options' => array(
      'asc' => t('Ascendant'),
      'desc' => t('Descendant')
    )
  );

  /** Specific file handlers settings
   * *************************************************************** */
  $handlers = module_implements("filebrowser_handler_info");
  if (count($handlers)) {
    $form['file_handlers'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => 'File handlers',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -6
    );
    foreach ($handlers as $module) {
      $info = module_invoke($module, "filebrowser_handler_info");
      $form['file_handlers']["$module"] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
        '#title' => $info['description'],
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => -6
      );
      $default_setting = $node->file_handlers->$module;
      if (!$default_setting) {
        $default_setting = (object)array();
      }
      $settings = module_invoke($module, "filebrowser_handler_settings", $default_setting);
      $form['file_handlers']["$module"]['enabled_thumbnailer'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enabled as thumbnailer'),
        '#description' => t('Enable this file handler as thumbnailer.'),
        '#default_value' => isset($default_setting->enabled_thumbnailer) ? $default_setting->enabled_thumbnailer : FALSE
      );
      $form['file_handlers']["$module"]['enabled_metadata'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enabled as metadata provider'),
        '#description' => t('Enable this file handler as metadata provider.'),
        '#default_value' => isset($default_setting->enabled_metadata) ? $default_setting->enabled_metadata : FALSE
      );
      foreach ($settings as $key => $setting) {
        $form['file_handlers']["$module"][$key] = $setting;
      }
    }
  }
  return $form;
}

/**
 * Implementation of hook_validate().
 */
function filebrowser_validate(& $node) {
  $node->folder_presentation = (object)$node->folder_presentation;
  $path = _filebrowser_get_node_root($node);
  $encoded_path = _filebrowser_encoding_to_fs($node, $path);
  if (!is_dir($encoded_path)) {
    $success = mkdir($encoded_path, 0777, TRUE);
    if (!$success) {
      form_set_error('file_path', t('The directory %dir is not a valid directory and I\'m unable to help this.', array(
        '%dir' => $path
      )));
    }
    else {
      drupal_set_message(t('The directory %dir has been created.', array(
        '%dir' => $path
      )));
    }
  }
  else {
    if (!is_readable($encoded_path)) {
      form_set_error('file_path', t('The directory %dir is not readable.', array(
        '%dir' => $path
      )));
    }
  }
}

/**
 * hook_db_rewrite_sql implementation.
 */
function filebrowser_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
  global $user;
  if ($primary_table == 'n' && $primary_field == 'nid' && !user_access(FILEBROWSER_VIEW_DIRECORY_LISTINGS, $user)) {
    $return = array(
      'where' => "n.type != 'dir_listing'"
    );
    return $return;
  }
}

/**
 * Implementation of hook_load().
 */
function filebrowser_load($node) {
  $data = db_fetch_object(db_query('SELECT * FROM {node_dir_listing} WHERE nid = %d', $node->nid));
  $additions = (object)unserialize($data->properties);

  $additions->folder_path = $data->folder_path;
  $additions->nid = $data->nid;
  _filebrowser_prepare_record($additions, TRUE);

  return $additions;
}

/**
 * Implementation of hook_insert().
 */
function filebrowser_insert($node) {
  _filebrowser_prepare_record($node, FALSE);
  drupal_write_record("node_dir_listing", $node);
}

/**
 * Implementation of hook_update().
 */
function filebrowser_update($node) {
  _filebrowser_prepare_record($node, FALSE);
  drupal_write_record("node_dir_listing", $node, 'nid');
  _filebrowser_node_content_delete($node);
}

/**
 * Implementation of hook_delete().
 */
function filebrowser_delete($node) {
  db_query('DELETE FROM {node_dir_listing} WHERE nid = %d', $node->nid);
  _filebrowser_node_content_delete($node);
}

/**
 * Implementation of hook_link().
 */
function filebrowser_link($type, $node = NULL, $teaser = FALSE) {
  if (isset($node->type) && $node->type == 'dir_listing') {
    $links = array();
    if (_filebrowser_metadata_access($node->file_listing['.']['fid'])) {
      $links['file_browser_metadata'] = array(
        'href' => "filebrowser/metadata/{$node->file_listing['.']['fid']}",
        'title' => t("Edit Metadatas"),
        'query' => 'destination=' . urlencode(request_uri())
      );
      $thumbnailers = module_implements("filebrowser_thumbnailer_prepare");
      if (count($thumbnailers) != 0) {
        $links['file_browser_update_thumbnails'] = array(
          'href' => "filebrowser/thumbnails/{$node->file_listing['.']['fid']}",
          'title' => t("Update thumbnails"),
          'query' => 'destination=' . urlencode(request_uri())
        );
      }
    }
    return $links;
  }
}

/**
 * Implementation of hook_menu().
 */
function filebrowser_menu() {
  $items = array();
  $items['filebrowser/download/%'] = array(
    'page callback' => 'filebrowser_page_download',
    'file' => 'filebrowser.pages.inc',
    'page arguments' => array(
      2
    ),
    'type' => MENU_CALLBACK,
    'access arguments' => array(
      FILEBROWSER_DOWNLOAD
    )
  );

  $items['filebrowser/delete/%'] = array(
    'page callback' => 'filebrowser_page_delete',
    'file' => 'filebrowser.pages.inc',
    'page arguments' => array(
      2
    ),
    'type' => MENU_CALLBACK,
    'access arguments' => array(
      FILEBROWSER_DELETE_FILE
    )
  );

  $items['filebrowser/metadata/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'filebrowser_form_metadata',
      2
    ),
    'access callback' => '_filebrowser_metadata_access',
    'access arguments' => array(
      2
    ),
    'file' => 'filebrowser.pages.inc',
    'type' => MENU_CALLBACK
  );

  $items['filebrowser/thumbnails/%'] = array(
    'page callback' => 'filebrowser_update_thumbnails',
    'page arguments' => array(
      2
    ),
    'access callback' => '_filebrowser_metadata_access',
    'access arguments' => array(
      2
    ),
    'file' => 'filebrowser.pages.inc',
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of hook_init().
 */
function filebrowser_view($node, $teaser = FALSE, $page = FALSE) {
  global $user, $base_url;
  $node = node_prepare($node, $teaser);

  if (!$teaser) {
    _filebrowser_load_files($node);

    // Full node content view
    // ========================================================


    // Keep track of the current location and update breadcrumbs to reflect that.
    $breadcrumbs = array(
      l(t('Home'), NULL)
    );
    $breadcrumb_path = "";

    $path_elements = explode('/', rtrim($node->file_listing['.']['relative-path'], "/"));
    for ($i = 0; $i < count($path_elements); $i++) {
      $child_dir = $path_elements[$i] == '' ? '/' : $path_elements[$i];
      $breadcrumb_path .= $child_dir;
      $fid = db_result(db_query("SELECT fid FROM {node_dir_listing_content} WHERE path='%s'", $breadcrumb_path));
      if ($child_dir == '/') {
        $label = $node->title;
      }
      else {
        $label = $child_dir;
      }
      if ($i < (count($path_elements) - 1)) {
        $breadcrumbs[] = l($label, "node/{$node->nid}/$fid");
      }
      else {
        $breadcrumbs[] = $label;
      }
    }
    drupal_set_breadcrumb($breadcrumbs);

    // Insert file listing  content part
    $current_view = _filebrowser_externals('presentations', $node->folder_presentation->default_view);
    $node->content['filebrowser_content'] = array(
      '#value' => count($node->file_listing) == 0 ? '' : theme($current_view['theme'], $node),
      '#weight' => 1
    );
    if ($node->folder_uploads->enabled && user_access(FILEBROWSER_UPLOAD)) {
      $node->content['filebrowser_form_upload'] = array(
        '#value' => drupal_get_form('filebrowser_form_upload', $node),
        '#weight' => 2
      );
    }
    if ($node->folder_uploads->enabled && user_access(FILEBROWSER_CREATE_FOLDER)) {
      $node->content['filebrowser_form_create_folder'] = array(
        '#value' => drupal_get_form('filebrowser_form_create_folder', $node),
        '#weight' => 3
      );
    }
    $statistics = array(
      'empty' => t('This folder is empty')
    );
    if ($node->file_listing['.']['folders_count'] > 0) {
      $statistics['folders'] = format_plural($node->file_listing['.']['folders_count'], '1 dossier', '@count dossiers');
      $statistics['empty'] = NULL;
    }
    if ($node->file_listing['.']['files_count'] > 0) {
      $statistics['files'] = format_plural($node->file_listing['.']['files_count'], '1 file', '@count files');
      $statistics['size'] = format_size($node->file_listing['.']['size']);
      $statistics['empty'] = NULL;
    }
    $node->content['filebrowser_statistics'] = array(
      '#value' => theme('dir_listing_statistics', $statistics),
      '#weight' => 3
    );
  }
  return $node;
}

/**
 * upload form definition.
 */
function filebrowser_form_upload($form_state, $node) {
  $form = array();
  $form['filebrowser_uploads'] = array(
    '#type' => 'fieldset',
    '#title' => t('File Upload'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Uploaded file will be saved to the current directory.'),
    '#prefix' => '<div class="attachments">',
    '#suffix' => '</div>',
    '#weight' => 30
  );
  // Wrapper for fieldset contents (used by ahah.js).
  /*      $form['filebrowser_uploads']['wrapper'] = array(
        '#prefix' => '<div id="attach-wrapper">',
        '#suffix' => '</div>',
      '#type'=>'textfield'

      );*/
  $form['#node'] = $node;
  $form['#attributes'] = array(
    'enctype' => "multipart/form-data"
  );
  _filebrowser_load_files($node);
  $form['#submit'][] = 'filebrowser_form_upload_submit';
  $form['#validate'][] = 'filebrowser_form_upload_validate';

  $i = 1; // Later we can have multi-upload
  $form['filebrowser_uploads']["file_$i"] = array(
    '#type' => 'file',
    '#title' => t('Upload file'),
    '#size' => 40
  );
  /*$form['filebrowser_uploads']["description_$i"] = array(																															//I Changed this.
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#size' => 255
  );*/
  $form['filebrowser_uploads']["file_name_$i"] = array(
    '#type' => 'textfield',
    '#description' => t('If you would like to change the filename, please enter it here with NO EXTENSION.'),
    '#title' => t('New name'),
    '#size' => 40
  );
  $form['submitted'] = array(
    '#tree' => TRUE
  );
  $form['filebrowser_uploads']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload')
  /*'#ahah' => array(
        'path' => 'upload/js',
        'wrapper' => 'attach-wrapper',
        'progress' => array('type' => 'bar', 'message' => t('Please wait...')),
      ),*/
  );
  $form['#redirect'] = NULL;
  return $form;
}

/**
 * uploads validation.
 */
function filebrowser_form_upload_validate($form, $form_state) {
  $node = $form['#node'];
  _filebrowser_load_files($node);

  $i = 1; // Later we can have multi-upload
  $target = _filebrowser_build_new_upload_file_name($node, $form_state, $i);

  if (!$node->folder_uploads->allow_overwrite && file_exists($target)) {
    form_error($form['filebrowser_uploads']["file_$i"], t("This file already exists."));
  }
  if (!empty($node->folder_uploads->accepted_uploaded_files) && !_filebrowser_match_path($target, $node->folder_uploads->accepted_uploaded_files)) {
    form_error($form['filebrowser_uploads']["file_$i"], t("Sorry, you can't upload this kind of file."));
  }
}

/**
 * uploads submition.
 */
function filebrowser_form_upload_submit($form, & $form_state) {
  $i = 1; // Later we can have multi-upload
  $node = $form['#node'];
  $target = _filebrowser_build_new_upload_file_name($node, $form_state, $i);
  $success = copy($_FILES['files']['tmp_name']["file_$i"], $target);
  if (!$success) {
    drupal_set_message(t("Unable to upload this file, do you have filesystem right to do that ?"), 'error');
  }
  else {
    _filebrowser_load_files($node, NULL, TRUE); // force listing rebuild
    if (!empty($form['filebrowser_uploads']["description_$i"])) {
      $file = $node->file_listing[_filebrowser_safe_basename($target)];
      module_invoke_all('filebrowser_metadata_set', $file, array(
        'description' => $form_state['values']["description_$i"]
      ));
    }
  }
  drupal_goto("node/{$node->nid}/{$node->file_listing['.']['fid']}", _filebrowser_url_query());
}

function filebrowser_form_create_folder($form_state, $node) {
  $form = array();
  $form['filebrowser_create_folder'] = array(
    '#type' => 'fieldset',
    '#title' => t('Create a folder'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('This folder will be created within the current directory.'),
    '#weight' => 30
  );
  $form['#node'] = $node;
  $form['#submit'][] = 'filebrowser_form_create_folder_submit';
  $form['#validate'][] = 'filebrowser_create_folder_validate';
  $form['filebrowser_create_folder']['folder_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Folder Name'),
    '#size' => 40,
    '#required' => TRUE
  );
  $form['filebrowser_create_folder']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#size' => 255
  );
  $form['submitted'] = array(
    '#tree' => TRUE
  );
  $form['filebrowser_create_folder']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create')
  );

  return $form;
}

/**
 * Implementation of hook_validate() for creating a folder
 */
function filebrowser_form_create_folder_validate($form, $form_state) {
  $node = $form['#node'];
  _filebrowser_load_files($node);
  $target = _filebrowser_encoding_to_fs($node, "{$node->file_listing['.']['full-path']}/{$form_state['values']['folder_name']}");

  if (file_exists($target)) {
    form_error($form['filebrowser_create_folder']['folder_name'], t("This folder already exists."));
  }
}

/**
 * create folder submition.
 */
function filebrowser_form_create_folder_submit($form, & $form_state) {
  $i = 1; // Later we can have multi-upload
  $node = $form['#node'];
  $target = _filebrowser_encoding_to_fs($node, "{$node->file_listing['.']['full-path']}/{$form_state['values']['folder_name']}");

  $success = mkdir($target, 0777);
  if (!$success) {
    drupal_set_message(t("Unable to create this folder, do you have filesystem right to do that ?"), 'error');
  }
  else {
    _filebrowser_load_files($node, NULL, TRUE); // force listing rebuild
    if (!empty($form_state['values']["description"])) {
      $file = $node->file_listing[_filebrowser_safe_basename($target)];
      module_invoke_all('filebrowser_metadata_set', $file, array(
        'description' => $form_state['values']["description"]
      ));
    }
  }
  drupal_goto("node/{$node->nid}/{$node->file_listing['.']['fid']}", _filebrowser_url_query());
}

function filebrowser_form_actions($form_state, $table, $actions, $node) {
  $form = array();
  $form['#node'] = $node;
  $form['table'] = array(
    '#value' => $table
  );
  foreach ($node->file_listing as $file_name => $data) {
    $form["select_{$data['fid']}"] = array(
      '#type' => 'checkbox',
      '#prefix' => '<!-- ',
      '#suffix' => ' -->'
    );
  }
  $options = array(
    '' => t('choose an action')
  );
  foreach ($actions as $action) {
    $options[$action['operation']] = $action['title'];
  }
  $form['action'] = array(
    '#prefix' => '<br/><div class="container-inline">',
    '#title' => t('actions'),
    '#type' => 'select',
    '#options' => $options
  );
  $form['submit'] = array(
    '#value' => t('Process'),
    '#type' => 'submit',
    '#suffix' => '</div><br/>'
  );
  return $form;
}

function filebrowser_form_actions_submit($form, $form_state) {
  if (!empty($form_state['values']['action'])) {
    $fids = array();
    foreach ($form['#node']->file_listing as $file_name => $data) {
      if ($form_state['values']["select_{$data['fid']}"]) {
        $fids[] = $data['fid'];
      }
    }
    $result = module_invoke_all('filebrowser_action_process', $form['#node'], $form_state['values']['action'], $fids);
    if ($result) {
      return $result;
    }
  }
  header('Location: ' . request_uri(), TRUE, 302);
  exit();
}

/**
 * File delete confirmation form
 */
function filebrowser_form_delete_confirm(&$form_state, $fids) {
  $form['fids'] = array(
    '#type' => 'value',
    '#value' => $fids
  );

  foreach ($fids as &$fid) {
    $file = _filebrowser_node_content_load($fid);
    $fid = _filebrowser_safe_basename($file['path']);
  }
  return confirm_form($form, t('Are you sure you want to delete following files ?'), isset($_GET['destination']) ? $_GET['destination'] : 'node/' . $node->nid, "<ul><li>" . implode("</li><li>", $fids) . "</li></ul>" . t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

/**
 * File delete confirmation form submit
 */
function filebrowser_form_delete_confirm_submit($form, &$form_state) {
  foreach ($form_state['values']['fids'] as $fid) {
    $content = _filebrowser_node_content_load($fid);
    $node = node_load($content['nid']);
    $target = _filebrowser_encoding_to_fs($node, _filebrowser_get_node_root($node) . $content['path']);
    if (is_file($target)) {
      $result = unlink($target);
      if (!$result) {
        drupal_set_message(t('Unable to delete @file', array(
          '@file' => $target
        )), 'warning');
      }
    }
    else {
      $result = rmdir($target);
      if (!$result) {
        drupal_set_message(t('Unable to prune @file (not empty ?)', array(
          '@file' => $target
        )), 'warning');
      }
    }
  }

  $form_state['redirect'] = isset($_GET['destination']) ? $_GET['destination'] : '<front>';
}

/**
 * hook_access implementation.
 */
function filebrowser_access($op, $node, $account) {
  if ($op == 'view') {
    if (!user_access(FILEBROWSER_VIEW_DIRECORY_LISTINGS, $account)) {
      return FALSE;
    }
  }

  if ($op == 'create') {
    if (!user_access(FILEBROWSER_CREATE_DIRECTORY_LISTING, $account)) {
      return FALSE;
    }
  }

  if ($op == 'update') {
    if (!user_access(FILEBROWSER_EDIT_ANY_DIRECORY_LISTINGS, $account) || !(user_access(FILEBROWSER_EDIT_OWN_DIRECTORY_LISTINGS, $account) && ($account->uid == $node->uid))) {
      return FALSE;
    }
  }

  if ($op == 'delete') {
    if (!user_access(FILEBROWSER_DELETE_ANY_DIRECTORY_LISTINGS, $account) || (user_access(FILEBROWSER_DELETE_OWN_DIRECTORY_LISTINGS, $account) && ($account->uid == $node->uid))) {
      return FALSE;
    }
  }
}

/**
 * hook_filebrowser_actions_info implementation
 * @param unknown_type $node
 */
function filebrowser_filebrowser_actions_info($node) {
  $actions = array();
  if ($node->file_listing['.']['files_count'] > 0) {
    if (_filebrowser_can_download_archive($node) && function_exists('zip_open')) {
      $actions[] = array(
        'operation' => 'download',
        'title' => t("Download selected items as an ZIP archive (only files)")
      );
    }
    if (user_access(FILEBROWSER_DELETE_FILE)) {
      $actions[] = array(
        'operation' => 'delete',
        'title' => t("Delete selected items")
      );
    }
  }
  return $actions;
}

/**
 * hook_filebrowser_action_process implementation
 */
function filebrowser_filebrowser_action_process($node, $action, $fids) {
  switch ($action) {
    case 'download' :
      $root_fid = $node->file_listing['.']['fid'];
      if (count($fids) > 0) {
        $root_fid .= ":" . implode(',', $fids);
      }
      require_once "filebrowser.pages.inc";
      filebrowser_page_download($root_fid);
      break;

    case 'delete' :
      drupal_goto("filebrowser/delete/" . implode(',', $fids), drupal_get_destination());

   //      'destination=' . urlencode(request_uri()));
  }
}

/**
 * hook_filebrowser_download_manager_info implementation.
 */
function filebrowser_filebrowser_download_manager_info() {
  return array(
    'public' => array(
      'title' => t('Direct download (files are served by the web serveur and should be accessible by it)')
    ),
    'private' => array(
      'title' => t('Private download (files are served by PHP/Drupal an could be everywhere)')
    )
  );
}

/**
 * hook_filebrowser_download_manager_process implementation.
 */
function filebrowser_filebrowser_download_manager_process($delta = NULL, $file = NULL, $filename = NULL) {
  switch ($delta) {
    case 'public' :
      $web_root = getcwd();
      if (strpos($web_root, $file) === 0) {
        $target = substr($file, strlen($web_root));
      }
      else {
        $target = $file;
      }
      header("Location: " . url(trim($target, '/'), array(
        'absolute' => TRUE
      )));
      return TRUE;

    case 'private' :
      header('Content-Description: File Transfer');
      header("Cache-Control: public, must-revalidate, max-age=0"); // HTTP/1.1
      header("Pragma: public");
      header("Expires: Sat, 26 Jul 1997 05:00:00 GMT"); // Date in the past
      header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
      header("Content-Type: " . file_get_mimetype($filename));
      header("Content-Transfer-Encoding: binary");
      header("Content-Length: " . filesize($file));
      if (eregi("MSIE", getenv("HTTP_USER_AGENT")) || eregi("Internet Explorer", getenv("HTTP_USER_AGENT"))) {
        header('Content-Disposition: inline; filename="' . mb_convert_encoding(_filebrowser_safe_basename($filename), "ISO-8859-2", "UTF-8") . '";');
      }
      else {
        header('Content-Disposition: inline; filename="' . _filebrowser_safe_basename($filename) . '";');
      }
      $block_size = 4096;
      $buffer = '';
      $handle = fopen($file, 'rb');
      set_time_limit(0);
      if ($handle !== FALSE) {
        while (!feof($handle)) {
          $buffer = fgets($handle, $block_size);
          echo $buffer;
          ob_flush();
          flush();
        }
        fclose($handle);
      }
      return TRUE;
  }
}

/**
 * hook_filebrowser_presentation
 */
function filebrowser_filebrowser_presentations() {
  return array(
    'list-view' => array(
      'title' => t('Present this folder as a list-view'),
      'theme' => 'dir_listing_list_view'
    ),
    'icon-view' => array(
      'title' => t('Present this folder as an icon-view'),
      'theme' => 'dir_listing_icon_view'
    )
  );
}

/**
 * hook_filebrowser_metadata_definition implementation.
 */
function filebrowser_filebrowser_metadata_info() {
  return array(
    FILEBROWSER_DATA_NAME_ICON => array(
      'title' => t('Icon')
    ),
    FILEBROWSER_DATA_NAME_DISPLAY_NAME => array(
      'title' => t('CATEGORY NAME'),
      'sortable' => TRUE,
      'type' => 'string'
    ),
    FILEBROWSER_DATA_NAME_CREATED => array(
      'title' => t('DATE CREATED'),
      'sortable' => TRUE,
      'type' => 'integer'
    ),
    FILEBROWSER_DATA_NAME_SIZE => array(
      'title' => t('size'),
      'sortable' => TRUE,
      'type' => 'integer'
    ),
    FILEBROWSER_DATA_NAME_MODIFIED => array(
      'title' => t('modified'),
      'sortable' => TRUE,
      'type' => 'integer'
    ),
    FILEBROWSER_DATA_NAME_TYPE => array(
      'title' => t('Mime type'),
      'sortable' => TRUE,
      'type' => 'string'
    ),
    FILEBROWSER_DATA_NAME_DESCRIPTION => array(
      'title' => t('Description'),
      'writable' => TRUE,
      'sortable' => TRUE,
      'type' => 'string'
    )
  );
}

function filebrowser_filebrowser_metadata_get($file) {
  $full_path = $file['full-path'];
  $is_file = is_file($full_path);
  $result = array(
    'created' => 0,
    'modified' => 0,
    'size' => 0,
    'kind' => $is_file ? 0 : 1,
    'mime-type' => !$is_file ? "folder" : file_get_mimetype($full_path),
    'description' => _filebrowser_read_description($full_path)
  );

  if (($f_stats = stat($full_path)) !== FALSE) {
    if (is_file($full_path)) {
      $result['size'] = $f_stats['size'];
    }
    $result['created'] = $f_stats['ctime'];
    $result['modified'] = $f_stats['mtime'];
  }
  return $result;
}

function filebrowser_filebrowser_metadata_set($file, $metadata) {
  $base_path = _filebrowser_safe_dirname($file['full-path']);
  $data = _filebrowser_load_description_file($base_path);
  if (!isset($data['file'])) {
    $data['file'] = "$base_path/descript.ion";
  }
  $data['data'][$file['display-name']] = $metadata['description'];
  _filebrowser_save_description_file($data, $base_path);
  _filebrowser_load_description_file($base_path, $data);
}

/**
 * Implementation of hook_theme().
 */
function filebrowser_theme() {
  return array(
    'dir_listing_list_view' => array(
      'arguments' => array(
        'node' => NULL
      ),
      'file' => 'filebrowser.theme.inc'
    ),
    'dir_listing_icon' => array(
      'arguments' => array(
        'file' => NULL,
        'thumbnail' => NULL,
        'title' => NULL,
        'description' => NULL,
        'href' => NULL,
        'new' => NULL
      ),
      'template' => 'dir_listing_icon'
    ),
    'dir_listing_icon_view' => array(
      'arguments' => array(
        'node' => NULL
      ),
      'file' => 'filebrowser.theme.inc'
    ),
    'dir_listing_statistics' => array(
      'arguments' => array(
        'statistics' => NULL
      ),
      'file' => 'filebrowser.theme.inc'
    ),
    'dir_listing_metadata_group' => array(
      'file' => 'filebrowser.theme.inc'
    )
  );
}